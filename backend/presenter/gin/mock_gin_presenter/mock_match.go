// Code generated by MockGen. DO NOT EDIT.
// Source: ./match.go

// Package mock_gin_presenter is a generated GoMock package.
package mock_gin_presenter

import (
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5-web-go/backend/entity"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockMatchPresenter is a mock of MatchPresenter interface.
type MockMatchPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockMatchPresenterMockRecorder
}

// MockMatchPresenterMockRecorder is the mock recorder for MockMatchPresenter.
type MockMatchPresenterMockRecorder struct {
	mock *MockMatchPresenter
}

// NewMockMatchPresenter creates a new mock instance.
func NewMockMatchPresenter(ctrl *gomock.Controller) *MockMatchPresenter {
	mock := &MockMatchPresenter{ctrl: ctrl}
	mock.recorder = &MockMatchPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchPresenter) EXPECT() *MockMatchPresenterMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m_2 *MockMatchPresenter) Handle(c *gin.Context, m *entity.Match) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Handle", c, m)
}

// Handle indicates an expected call of Handle.
func (mr *MockMatchPresenterMockRecorder) Handle(c, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMatchPresenter)(nil).Handle), c, m)
}
