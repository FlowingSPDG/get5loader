package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlowingSPDG/get5loader/backend/entity"
	"github.com/FlowingSPDG/get5loader/backend/g5ctx"
	"github.com/FlowingSPDG/get5loader/backend/graph/model"
)

// RegisterTeam is the resolver for the registerTeam field.
func (r *mutationResolver) RegisterTeam(ctx context.Context, input model.NewTeam) (string, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return "", err
	}
	teamID, err := r.TeamUsecase.RegisterTeam(ctx, token.UserID, input.Name, input.Flag, input.Tag, input.Logo, input.Public)
	if err != nil {
		return "", err
	}
	return string(teamID), nil
}

// AddServer is the resolver for the addServer field.
func (r *mutationResolver) AddServer(ctx context.Context, input model.NewGameServer) (string, error) {
	gs, err := r.GameServerUsecase.AddGameServer(ctx, entity.UserID(input.UserID), input.IP, uint32(input.Port), input.RconPassword, input.Name, input.Public)
	if err != nil {
		return "", err
	}
	return string(gs.ID), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
