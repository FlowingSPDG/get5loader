package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/FlowingSPDG/get5loader/backend/entity"
	"github.com/FlowingSPDG/get5loader/backend/g5ctx"
	"github.com/FlowingSPDG/get5loader/backend/graph/model"
	"github.com/FlowingSPDG/get5loader/backend/usecase"
)

// MapStats is the resolver for the mapStats field.
func (r *matchResolver) MapStats(ctx context.Context, obj *model.Match) ([]*model.MapStats, error) {
	panic(fmt.Errorf("not implemented: MapStats - mapStats"))
}

// RegisterTeam is the resolver for the registerTeam field.
func (r *mutationResolver) RegisterTeam(ctx context.Context, input model.NewTeam) (*model.Team, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}
	inputPlayers := make([]usecase.InputPlayers, 0, len(input.Players))
	for _, player := range input.Players {
		inputPlayers = append(inputPlayers, usecase.InputPlayers{
			SteamID: entity.SteamID(player.SteamID),
			Name:    player.Name,
		})
	}

	team, err := r.TeamUsecase.RegisterTeam(ctx, usecase.RegisterTeamInput{
		UserID:     token.UserID,
		Name:       input.Name,
		Flag:       input.Flag,
		Tag:        input.Tag,
		Logo:       input.Logo,
		PublicTeam: input.Public,
		Players:    inputPlayers,
	})
	if err != nil {
		return nil, err
	}
	return convertTeam(team), nil
}

// CreateMatch is the resolver for the createMatch field.
func (r *mutationResolver) CreateMatch(ctx context.Context, input model.NewMatch) (*model.Match, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}
	match, err := r.MatchUsecase.CreateMatch(ctx, token.UserID, entity.GameServerID(input.ServerID), entity.TeamID(input.Team1), entity.TeamID(input.Team2), input.MaxMaps, input.Title)
	if err != nil {
		return nil, err
	}
	return convertMatch(match), nil
}

// AddServer is the resolver for the addServer field.
func (r *mutationResolver) AddServer(ctx context.Context, input model.NewGameServer) (*model.GameServer, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}
	gs, err := r.GameServerUsecase.AddGameServer(ctx, token.UserID, input.IP, uint32(input.Port), input.RconPassword, input.Name, input.Public)
	if err != nil {
		return nil, err
	}
	return convertGameServer(gs), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserUsecase.GetUser(ctx, entity.UserID(id))
	if err != nil {
		return nil, err
	}
	return convertUser(user), nil
}

// GetMe is the resolver for the getMe field.
func (r *queryResolver) GetMe(ctx context.Context) (*model.User, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}
	user, err := r.UserUsecase.GetUser(ctx, token.UserID)
	if err != nil {
		return nil, err
	}
	return convertUser(user), nil
}

// GetTeam is the resolver for the getTeam field.
func (r *queryResolver) GetTeam(ctx context.Context, id string) (*model.Team, error) {
	team, err := r.TeamUsecase.GetTeam(ctx, entity.TeamID(id))
	if err != nil {
		return nil, err
	}
	return convertTeam(team), nil
}

// GetTeamsByUser is the resolver for the getTeamsByUser field.
func (r *queryResolver) GetTeamsByUser(ctx context.Context) ([]*model.Team, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}
	teams, err := r.TeamUsecase.GetTeamsByUser(ctx, token.UserID)
	if err != nil {
		return nil, err
	}

	return convertTeams(teams), nil
}

// GetMatch is the resolver for the getMatch field.
func (r *queryResolver) GetMatch(ctx context.Context, id string) (*model.Match, error) {
	match, err := r.MatchUsecase.GetMatch(ctx, entity.MatchID(id))
	if err != nil {
		return nil, err
	}

	return convertMatch(match), nil
}

// GetMatchesByUser is the resolver for the getMatchesByUser field.
func (r *queryResolver) GetMatchesByUser(ctx context.Context, id string) ([]*model.Match, error) {
	matches, err := r.MatchUsecase.GetMatchesByUser(ctx, entity.UserID(id))
	if err != nil {
		return nil, err
	}

	return convertMatches(matches), nil
}

// GetMatchesByMe is the resolver for the getMatchesByMe field.
func (r *queryResolver) GetMatchesByMe(ctx context.Context) ([]*model.Match, error) {
	token, err := g5ctx.GetUserToken(ctx)
	if err != nil {
		return nil, err
	}

	matches, err := r.MatchUsecase.GetMatchesByUser(ctx, token.UserID)
	if err != nil {
		return nil, err
	}

	return convertMatches(matches), nil
}

// GetServer is the resolver for the getServer field.
func (r *queryResolver) GetServer(ctx context.Context, id string) (*model.GameServer, error) {
	gs, err := r.GameServerUsecase.GetGameServer(ctx, entity.GameServerID(id))
	if err != nil {
		return nil, err
	}

	return convertGameServer(gs), nil
}

// GetPublicServers is the resolver for the getPublicServers field.
func (r *queryResolver) GetPublicServers(ctx context.Context) ([]*model.GameServer, error) {
	gs, err := r.GameServerUsecase.GetPublicServers(ctx)
	if err != nil {
		return nil, err
	}

	return convertGameServers(gs), nil
}

// Players is the resolver for the players field.
func (r *teamResolver) Players(ctx context.Context, obj *model.Team) ([]*model.Player, error) {
	panic(fmt.Errorf("not implemented: Players - players"))
}

// Gameservers is the resolver for the gameservers field.
func (r *userResolver) Gameservers(ctx context.Context, obj *model.User) ([]*model.GameServer, error) {
	panic(fmt.Errorf("not implemented: Gameservers - gameservers"))
}

// Teams is the resolver for the teams field.
func (r *userResolver) Teams(ctx context.Context, obj *model.User) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Matches is the resolver for the matches field.
func (r *userResolver) Matches(ctx context.Context, obj *model.User) ([]*model.Match, error) {
	panic(fmt.Errorf("not implemented: Matches - matches"))
}

// Match returns MatchResolver implementation.
func (r *Resolver) Match() MatchResolver { return &matchResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Team returns TeamResolver implementation.
func (r *Resolver) Team() TeamResolver { return &teamResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type matchResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type teamResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
