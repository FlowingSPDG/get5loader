package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlowingSPDG/get5loader/backend/entity"
	"github.com/FlowingSPDG/get5loader/backend/graph/model"
)

// AddServer is the resolver for the addServer field.
func (r *mutationResolver) AddServer(ctx context.Context, input model.NewGameServer) (*model.GameServer, error) {
	gs, err := r.GameServerUsecase.AddGameServer(ctx, entity.UserID(input.UserID), input.IP, uint32(input.Port), input.RconPassword, input.Name, input.Public)
	if err != nil {
		return nil, err
	}
	return &model.GameServer{
		ID:     string(gs.ID),
		IP:     gs.Ip,
		Port:   int(gs.Port),
		Name:   gs.DisplayName,
		Public: gs.IsPublic,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
