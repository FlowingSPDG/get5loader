// Code generated by MockGen. DO NOT EDIT.
// Source: user_login.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5-web-go/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserLogin is a mock of UserLogin interface.
type MockUserLogin struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginMockRecorder
}

// MockUserLoginMockRecorder is the mock recorder for MockUserLogin.
type MockUserLoginMockRecorder struct {
	mock *MockUserLogin
}

// NewMockUserLogin creates a new mock instance.
func NewMockUserLogin(ctrl *gomock.Controller) *MockUserLogin {
	mock := &MockUserLogin{ctrl: ctrl}
	mock.recorder = &MockUserLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLogin) EXPECT() *MockUserLoginMockRecorder {
	return m.recorder
}

// IssueJWTBySteamID mocks base method.
func (m *MockUserLogin) IssueJWTBySteamID(ctx context.Context, steamID entity.SteamID, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWTBySteamID", ctx, steamID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWTBySteamID indicates an expected call of IssueJWTBySteamID.
func (mr *MockUserLoginMockRecorder) IssueJWTBySteamID(ctx, steamID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWTBySteamID", reflect.TypeOf((*MockUserLogin)(nil).IssueJWTBySteamID), ctx, steamID, password)
}
