// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5loader/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// IssueJWT mocks base method.
func (m *MockUser) IssueJWT(ctx context.Context, userID entity.UserID, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWT", ctx, userID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWT indicates an expected call of IssueJWT.
func (mr *MockUserMockRecorder) IssueJWT(ctx, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWT", reflect.TypeOf((*MockUser)(nil).IssueJWT), ctx, userID, password)
}

// IssueJWTBySteamID mocks base method.
func (m *MockUser) IssueJWTBySteamID(ctx context.Context, steamID entity.SteamID, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWTBySteamID", ctx, steamID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWTBySteamID indicates an expected call of IssueJWTBySteamID.
func (mr *MockUserMockRecorder) IssueJWTBySteamID(ctx, steamID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWTBySteamID", reflect.TypeOf((*MockUser)(nil).IssueJWTBySteamID), ctx, steamID, password)
}

// Register mocks base method.
func (m *MockUser) Register(ctx context.Context, steamID entity.SteamID, name string, admin bool, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, steamID, name, admin, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserMockRecorder) Register(ctx, steamID, name, admin, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUser)(nil).Register), ctx, steamID, name, admin, password)
}
