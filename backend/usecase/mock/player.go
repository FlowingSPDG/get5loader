// Code generated by MockGen. DO NOT EDIT.
// Source: player.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5loader/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayer is a mock of Player interface.
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerMockRecorder
}

// MockPlayerMockRecorder is the mock recorder for MockPlayer.
type MockPlayerMockRecorder struct {
	mock *MockPlayer
}

// NewMockPlayer creates a new mock instance.
func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &MockPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer) EXPECT() *MockPlayerMockRecorder {
	return m.recorder
}

// BatchGetPlayersByTeam mocks base method.
func (m *MockPlayer) BatchGetPlayersByTeam(ctx context.Context, teamIDs []entity.TeamID) (map[entity.TeamID][]*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetPlayersByTeam", ctx, teamIDs)
	ret0, _ := ret[0].(map[entity.TeamID][]*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetPlayersByTeam indicates an expected call of BatchGetPlayersByTeam.
func (mr *MockPlayerMockRecorder) BatchGetPlayersByTeam(ctx, teamIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPlayersByTeam", reflect.TypeOf((*MockPlayer)(nil).BatchGetPlayersByTeam), ctx, teamIDs)
}

// GetPlayersByTeam mocks base method.
func (m *MockPlayer) GetPlayersByTeam(ctx context.Context, teamID entity.TeamID) ([]*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByTeam", ctx, teamID)
	ret0, _ := ret[0].([]*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByTeam indicates an expected call of GetPlayersByTeam.
func (mr *MockPlayerMockRecorder) GetPlayersByTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByTeam", reflect.TypeOf((*MockPlayer)(nil).GetPlayersByTeam), ctx, teamID)
}
