// Code generated by MockGen. DO NOT EDIT.
// Source: gameserver.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5loader/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockGameServer is a mock of GameServer interface.
type MockGameServer struct {
	ctrl     *gomock.Controller
	recorder *MockGameServerMockRecorder
}

// MockGameServerMockRecorder is the mock recorder for MockGameServer.
type MockGameServerMockRecorder struct {
	mock *MockGameServer
}

// NewMockGameServer creates a new mock instance.
func NewMockGameServer(ctrl *gomock.Controller) *MockGameServer {
	mock := &MockGameServer{ctrl: ctrl}
	mock.recorder = &MockGameServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServer) EXPECT() *MockGameServerMockRecorder {
	return m.recorder
}

// AddGameServer mocks base method.
func (m *MockGameServer) AddGameServer(ctx context.Context, userID entity.UserID, ip string, port uint32, rconPassword, name string, isPublic bool) (*entity.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGameServer", ctx, userID, ip, port, rconPassword, name, isPublic)
	ret0, _ := ret[0].(*entity.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGameServer indicates an expected call of AddGameServer.
func (mr *MockGameServerMockRecorder) AddGameServer(ctx, userID, ip, port, rconPassword, name, isPublic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGameServer", reflect.TypeOf((*MockGameServer)(nil).AddGameServer), ctx, userID, ip, port, rconPassword, name, isPublic)
}

// BatchGetGameServersByUser mocks base method.
func (m *MockGameServer) BatchGetGameServersByUser(ctx context.Context, userIDs []entity.UserID) (map[entity.UserID][]*entity.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetGameServersByUser", ctx, userIDs)
	ret0, _ := ret[0].(map[entity.UserID][]*entity.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetGameServersByUser indicates an expected call of BatchGetGameServersByUser.
func (mr *MockGameServerMockRecorder) BatchGetGameServersByUser(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetGameServersByUser", reflect.TypeOf((*MockGameServer)(nil).BatchGetGameServersByUser), ctx, userIDs)
}

// DeleteGameServer mocks base method.
func (m *MockGameServer) DeleteGameServer(ctx context.Context, id entity.GameServerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGameServer indicates an expected call of DeleteGameServer.
func (mr *MockGameServerMockRecorder) DeleteGameServer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameServer", reflect.TypeOf((*MockGameServer)(nil).DeleteGameServer), ctx, id)
}

// GetGameServer mocks base method.
func (m *MockGameServer) GetGameServer(ctx context.Context, id entity.GameServerID) (*entity.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServer", ctx, id)
	ret0, _ := ret[0].(*entity.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameServer indicates an expected call of GetGameServer.
func (mr *MockGameServerMockRecorder) GetGameServer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServer", reflect.TypeOf((*MockGameServer)(nil).GetGameServer), ctx, id)
}

// GetPublicServers mocks base method.
func (m *MockGameServer) GetPublicServers(ctx context.Context) ([]*entity.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicServers", ctx)
	ret0, _ := ret[0].([]*entity.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicServers indicates an expected call of GetPublicServers.
func (mr *MockGameServerMockRecorder) GetPublicServers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicServers", reflect.TypeOf((*MockGameServer)(nil).GetPublicServers), ctx)
}
