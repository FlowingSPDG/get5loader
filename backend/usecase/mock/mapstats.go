// Code generated by MockGen. DO NOT EDIT.
// Source: mapstats.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5loader/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMapstat is a mock of Mapstat interface.
type MockMapstat struct {
	ctrl     *gomock.Controller
	recorder *MockMapstatMockRecorder
}

// MockMapstatMockRecorder is the mock recorder for MockMapstat.
type MockMapstatMockRecorder struct {
	mock *MockMapstat
}

// NewMockMapstat creates a new mock instance.
func NewMockMapstat(ctrl *gomock.Controller) *MockMapstat {
	mock := &MockMapstat{ctrl: ctrl}
	mock.recorder = &MockMapstatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapstat) EXPECT() *MockMapstatMockRecorder {
	return m.recorder
}

// BatchGetMapstatsByMatch mocks base method.
func (m *MockMapstat) BatchGetMapstatsByMatch(ctx context.Context, matchIDs []entity.MatchID) (map[entity.MatchID][]*entity.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMapstatsByMatch", ctx, matchIDs)
	ret0, _ := ret[0].(map[entity.MatchID][]*entity.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMapstatsByMatch indicates an expected call of BatchGetMapstatsByMatch.
func (mr *MockMapstatMockRecorder) BatchGetMapstatsByMatch(ctx, matchIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMapstatsByMatch", reflect.TypeOf((*MockMapstat)(nil).BatchGetMapstatsByMatch), ctx, matchIDs)
}

// GetMapStat mocks base method.
func (m *MockMapstat) GetMapStat(ctx context.Context, id entity.MapStatsID) (*entity.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStat", ctx, id)
	ret0, _ := ret[0].(*entity.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStat indicates an expected call of GetMapStat.
func (mr *MockMapstatMockRecorder) GetMapStat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStat", reflect.TypeOf((*MockMapstat)(nil).GetMapStat), ctx, id)
}

// GetMapStatsByMatch mocks base method.
func (m *MockMapstat) GetMapStatsByMatch(ctx context.Context, matchID entity.MatchID) ([]*entity.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatsByMatch", ctx, matchID)
	ret0, _ := ret[0].([]*entity.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStatsByMatch indicates an expected call of GetMapStatsByMatch.
func (mr *MockMapstatMockRecorder) GetMapStatsByMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatsByMatch", reflect.TypeOf((*MockMapstat)(nil).GetMapStatsByMatch), ctx, matchID)
}
