// Code generated by MockGen. DO NOT EDIT.
// Source: ./database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	entity "github.com/FlowingSPDG/get5loader/backend/entity"
	database "github.com/FlowingSPDG/get5loader/backend/gateway/database"
	gomock "go.uber.org/mock/gomock"
)

// MockDBConnector is a mock of DBConnector interface.
type MockDBConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorMockRecorder
}

// MockDBConnectorMockRecorder is the mock recorder for MockDBConnector.
type MockDBConnectorMockRecorder struct {
	mock *MockDBConnector
}

// NewMockDBConnector creates a new mock instance.
func NewMockDBConnector(ctrl *gomock.Controller) *MockDBConnector {
	mock := &MockDBConnector{ctrl: ctrl}
	mock.recorder = &MockDBConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnector) EXPECT() *MockDBConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBConnector)(nil).Close))
}

// GetConnection mocks base method.
func (m *MockDBConnector) GetConnection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockDBConnectorMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDBConnector)(nil).GetConnection))
}

// Open mocks base method.
func (m *MockDBConnector) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDBConnectorMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBConnector)(nil).Open))
}

// MockDBConnectorWithTx is a mock of DBConnectorWithTx interface.
type MockDBConnectorWithTx struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorWithTxMockRecorder
}

// MockDBConnectorWithTxMockRecorder is the mock recorder for MockDBConnectorWithTx.
type MockDBConnectorWithTxMockRecorder struct {
	mock *MockDBConnectorWithTx
}

// NewMockDBConnectorWithTx creates a new mock instance.
func NewMockDBConnectorWithTx(ctrl *gomock.Controller) *MockDBConnectorWithTx {
	mock := &MockDBConnectorWithTx{ctrl: ctrl}
	mock.recorder = &MockDBConnectorWithTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnectorWithTx) EXPECT() *MockDBConnectorWithTxMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDBConnectorWithTx) BeginTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBConnectorWithTxMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBConnectorWithTx)(nil).BeginTx))
}

// Close mocks base method.
func (m *MockDBConnectorWithTx) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBConnectorWithTxMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBConnectorWithTx)(nil).Close))
}

// Commit mocks base method.
func (m *MockDBConnectorWithTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBConnectorWithTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBConnectorWithTx)(nil).Commit))
}

// GetConnection mocks base method.
func (m *MockDBConnectorWithTx) GetConnection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockDBConnectorWithTxMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDBConnectorWithTx)(nil).GetConnection))
}

// GetTx mocks base method.
func (m *MockDBConnectorWithTx) GetTx() *sql.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockDBConnectorWithTxMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockDBConnectorWithTx)(nil).GetTx))
}

// Open mocks base method.
func (m *MockDBConnectorWithTx) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDBConnectorWithTxMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBConnectorWithTx)(nil).Open))
}

// Rollback mocks base method.
func (m *MockDBConnectorWithTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBConnectorWithTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBConnectorWithTx)(nil).Rollback))
}

// MockRepositoryConnector is a mock of RepositoryConnector interface.
type MockRepositoryConnector struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryConnectorMockRecorder
}

// MockRepositoryConnectorMockRecorder is the mock recorder for MockRepositoryConnector.
type MockRepositoryConnectorMockRecorder struct {
	mock *MockRepositoryConnector
}

// NewMockRepositoryConnector creates a new mock instance.
func NewMockRepositoryConnector(ctrl *gomock.Controller) *MockRepositoryConnector {
	mock := &MockRepositoryConnector{ctrl: ctrl}
	mock.recorder = &MockRepositoryConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryConnector) EXPECT() *MockRepositoryConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepositoryConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepositoryConnector)(nil).Close))
}

// GetGameServersRepository mocks base method.
func (m *MockRepositoryConnector) GetGameServersRepository() database.GameServersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServersRepository")
	ret0, _ := ret[0].(database.GameServersRepository)
	return ret0
}

// GetGameServersRepository indicates an expected call of GetGameServersRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetGameServersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServersRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetGameServersRepository))
}

// GetMapStatRepository mocks base method.
func (m *MockRepositoryConnector) GetMapStatRepository() database.MapStatRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatRepository")
	ret0, _ := ret[0].(database.MapStatRepository)
	return ret0
}

// GetMapStatRepository indicates an expected call of GetMapStatRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetMapStatRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetMapStatRepository))
}

// GetMatchesRepository mocks base method.
func (m *MockRepositoryConnector) GetMatchesRepository() database.MatchesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesRepository")
	ret0, _ := ret[0].(database.MatchesRepository)
	return ret0
}

// GetMatchesRepository indicates an expected call of GetMatchesRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetMatchesRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetMatchesRepository))
}

// GetPlayerStatRepository mocks base method.
func (m *MockRepositoryConnector) GetPlayerStatRepository() database.PlayerStatRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStatRepository")
	ret0, _ := ret[0].(database.PlayerStatRepository)
	return ret0
}

// GetPlayerStatRepository indicates an expected call of GetPlayerStatRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetPlayerStatRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStatRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetPlayerStatRepository))
}

// GetPlayersRepository mocks base method.
func (m *MockRepositoryConnector) GetPlayersRepository() database.PlayersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersRepository")
	ret0, _ := ret[0].(database.PlayersRepository)
	return ret0
}

// GetPlayersRepository indicates an expected call of GetPlayersRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetPlayersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetPlayersRepository))
}

// GetTeamsRepository mocks base method.
func (m *MockRepositoryConnector) GetTeamsRepository() database.TeamsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsRepository")
	ret0, _ := ret[0].(database.TeamsRepository)
	return ret0
}

// GetTeamsRepository indicates an expected call of GetTeamsRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetTeamsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetTeamsRepository))
}

// GetUserRepository mocks base method.
func (m *MockRepositoryConnector) GetUserRepository() database.UsersRepositry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(database.UsersRepositry)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockRepositoryConnectorMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockRepositoryConnector)(nil).GetUserRepository))
}

// Open mocks base method.
func (m *MockRepositoryConnector) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockRepositoryConnectorMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRepositoryConnector)(nil).Open))
}

// MockRepositoryConnectorWithTx is a mock of RepositoryConnectorWithTx interface.
type MockRepositoryConnectorWithTx struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryConnectorWithTxMockRecorder
}

// MockRepositoryConnectorWithTxMockRecorder is the mock recorder for MockRepositoryConnectorWithTx.
type MockRepositoryConnectorWithTxMockRecorder struct {
	mock *MockRepositoryConnectorWithTx
}

// NewMockRepositoryConnectorWithTx creates a new mock instance.
func NewMockRepositoryConnectorWithTx(ctrl *gomock.Controller) *MockRepositoryConnectorWithTx {
	mock := &MockRepositoryConnectorWithTx{ctrl: ctrl}
	mock.recorder = &MockRepositoryConnectorWithTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryConnectorWithTx) EXPECT() *MockRepositoryConnectorWithTxMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepositoryConnectorWithTx) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryConnectorWithTxMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).Close))
}

// Commit mocks base method.
func (m *MockRepositoryConnectorWithTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRepositoryConnectorWithTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).Commit))
}

// GetGameServersRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetGameServersRepository() database.GameServersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServersRepository")
	ret0, _ := ret[0].(database.GameServersRepository)
	return ret0
}

// GetGameServersRepository indicates an expected call of GetGameServersRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetGameServersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServersRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetGameServersRepository))
}

// GetMapStatRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetMapStatRepository() database.MapStatRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatRepository")
	ret0, _ := ret[0].(database.MapStatRepository)
	return ret0
}

// GetMapStatRepository indicates an expected call of GetMapStatRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetMapStatRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetMapStatRepository))
}

// GetMatchesRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetMatchesRepository() database.MatchesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesRepository")
	ret0, _ := ret[0].(database.MatchesRepository)
	return ret0
}

// GetMatchesRepository indicates an expected call of GetMatchesRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetMatchesRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetMatchesRepository))
}

// GetPlayerStatRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetPlayerStatRepository() database.PlayerStatRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStatRepository")
	ret0, _ := ret[0].(database.PlayerStatRepository)
	return ret0
}

// GetPlayerStatRepository indicates an expected call of GetPlayerStatRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetPlayerStatRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStatRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetPlayerStatRepository))
}

// GetPlayersRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetPlayersRepository() database.PlayersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersRepository")
	ret0, _ := ret[0].(database.PlayersRepository)
	return ret0
}

// GetPlayersRepository indicates an expected call of GetPlayersRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetPlayersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetPlayersRepository))
}

// GetTeamsRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetTeamsRepository() database.TeamsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsRepository")
	ret0, _ := ret[0].(database.TeamsRepository)
	return ret0
}

// GetTeamsRepository indicates an expected call of GetTeamsRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetTeamsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetTeamsRepository))
}

// GetUserRepository mocks base method.
func (m *MockRepositoryConnectorWithTx) GetUserRepository() database.UsersRepositry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(database.UsersRepositry)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockRepositoryConnectorWithTxMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).GetUserRepository))
}

// Open mocks base method.
func (m *MockRepositoryConnectorWithTx) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockRepositoryConnectorWithTxMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).Open))
}

// Rollback mocks base method.
func (m *MockRepositoryConnectorWithTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRepositoryConnectorWithTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRepositoryConnectorWithTx)(nil).Rollback))
}

// MockUsersRepositry is a mock of UsersRepositry interface.
type MockUsersRepositry struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositryMockRecorder
}

// MockUsersRepositryMockRecorder is the mock recorder for MockUsersRepositry.
type MockUsersRepositryMockRecorder struct {
	mock *MockUsersRepositry
}

// NewMockUsersRepositry creates a new mock instance.
func NewMockUsersRepositry(ctrl *gomock.Controller) *MockUsersRepositry {
	mock := &MockUsersRepositry{ctrl: ctrl}
	mock.recorder = &MockUsersRepositryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepositry) EXPECT() *MockUsersRepositryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersRepositry) CreateUser(ctx context.Context, steamID entity.SteamID, name string, admin bool, hash []byte) (entity.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, steamID, name, admin, hash)
	ret0, _ := ret[0].(entity.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersRepositryMockRecorder) CreateUser(ctx, steamID, name, admin, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersRepositry)(nil).CreateUser), ctx, steamID, name, admin, hash)
}

// GetUser mocks base method.
func (m *MockUsersRepositry) GetUser(ctx context.Context, id entity.UserID) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersRepositryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersRepositry)(nil).GetUser), ctx, id)
}

// GetUserBySteamID mocks base method.
func (m *MockUsersRepositry) GetUserBySteamID(ctx context.Context, steamID entity.SteamID) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySteamID", ctx, steamID)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySteamID indicates an expected call of GetUserBySteamID.
func (mr *MockUsersRepositryMockRecorder) GetUserBySteamID(ctx, steamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySteamID", reflect.TypeOf((*MockUsersRepositry)(nil).GetUserBySteamID), ctx, steamID)
}

// MockGameServersRepository is a mock of GameServersRepository interface.
type MockGameServersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameServersRepositoryMockRecorder
}

// MockGameServersRepositoryMockRecorder is the mock recorder for MockGameServersRepository.
type MockGameServersRepositoryMockRecorder struct {
	mock *MockGameServersRepository
}

// NewMockGameServersRepository creates a new mock instance.
func NewMockGameServersRepository(ctrl *gomock.Controller) *MockGameServersRepository {
	mock := &MockGameServersRepository{ctrl: ctrl}
	mock.recorder = &MockGameServersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServersRepository) EXPECT() *MockGameServersRepositoryMockRecorder {
	return m.recorder
}

// AddGameServer mocks base method.
func (m *MockGameServersRepository) AddGameServer(ctx context.Context, userID entity.UserID, ip string, port uint32, rconPassword, displayName string, isPublic bool) (entity.GameServerID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGameServer", ctx, userID, ip, port, rconPassword, displayName, isPublic)
	ret0, _ := ret[0].(entity.GameServerID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGameServer indicates an expected call of AddGameServer.
func (mr *MockGameServersRepositoryMockRecorder) AddGameServer(ctx, userID, ip, port, rconPassword, displayName, isPublic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGameServer", reflect.TypeOf((*MockGameServersRepository)(nil).AddGameServer), ctx, userID, ip, port, rconPassword, displayName, isPublic)
}

// DeleteGameServer mocks base method.
func (m *MockGameServersRepository) DeleteGameServer(ctx context.Context, id entity.GameServerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGameServer indicates an expected call of DeleteGameServer.
func (mr *MockGameServersRepositoryMockRecorder) DeleteGameServer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameServer", reflect.TypeOf((*MockGameServersRepository)(nil).DeleteGameServer), ctx, id)
}

// GetGameServer mocks base method.
func (m *MockGameServersRepository) GetGameServer(ctx context.Context, id entity.GameServerID) (*database.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServer", ctx, id)
	ret0, _ := ret[0].(*database.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameServer indicates an expected call of GetGameServer.
func (mr *MockGameServersRepositoryMockRecorder) GetGameServer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServer", reflect.TypeOf((*MockGameServersRepository)(nil).GetGameServer), ctx, id)
}

// GetGameServersByUser mocks base method.
func (m *MockGameServersRepository) GetGameServersByUser(ctx context.Context, userID entity.UserID) ([]*database.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServersByUser", ctx, userID)
	ret0, _ := ret[0].([]*database.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameServersByUser indicates an expected call of GetGameServersByUser.
func (mr *MockGameServersRepositoryMockRecorder) GetGameServersByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServersByUser", reflect.TypeOf((*MockGameServersRepository)(nil).GetGameServersByUser), ctx, userID)
}

// GetGameServersByUsers mocks base method.
func (m *MockGameServersRepository) GetGameServersByUsers(ctx context.Context, userIDs []entity.UserID) (map[entity.UserID][]*database.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameServersByUsers", ctx, userIDs)
	ret0, _ := ret[0].(map[entity.UserID][]*database.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameServersByUsers indicates an expected call of GetGameServersByUsers.
func (mr *MockGameServersRepositoryMockRecorder) GetGameServersByUsers(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameServersByUsers", reflect.TypeOf((*MockGameServersRepository)(nil).GetGameServersByUsers), ctx, userIDs)
}

// GetPublicGameServers mocks base method.
func (m *MockGameServersRepository) GetPublicGameServers(ctx context.Context) ([]*database.GameServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicGameServers", ctx)
	ret0, _ := ret[0].([]*database.GameServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicGameServers indicates an expected call of GetPublicGameServers.
func (mr *MockGameServersRepositoryMockRecorder) GetPublicGameServers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicGameServers", reflect.TypeOf((*MockGameServersRepository)(nil).GetPublicGameServers), ctx)
}

// MockMatchesRepository is a mock of MatchesRepository interface.
type MockMatchesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMatchesRepositoryMockRecorder
}

// MockMatchesRepositoryMockRecorder is the mock recorder for MockMatchesRepository.
type MockMatchesRepositoryMockRecorder struct {
	mock *MockMatchesRepository
}

// NewMockMatchesRepository creates a new mock instance.
func NewMockMatchesRepository(ctrl *gomock.Controller) *MockMatchesRepository {
	mock := &MockMatchesRepository{ctrl: ctrl}
	mock.recorder = &MockMatchesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchesRepository) EXPECT() *MockMatchesRepositoryMockRecorder {
	return m.recorder
}

// AddMatch mocks base method.
func (m *MockMatchesRepository) AddMatch(ctx context.Context, userID entity.UserID, serverID entity.GameServerID, team1ID, team2ID entity.TeamID, maxMaps int32, title string, skipVeto bool, apiKey string) (entity.MatchID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMatch", ctx, userID, serverID, team1ID, team2ID, maxMaps, title, skipVeto, apiKey)
	ret0, _ := ret[0].(entity.MatchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMatch indicates an expected call of AddMatch.
func (mr *MockMatchesRepositoryMockRecorder) AddMatch(ctx, userID, serverID, team1ID, team2ID, maxMaps, title, skipVeto, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMatch", reflect.TypeOf((*MockMatchesRepository)(nil).AddMatch), ctx, userID, serverID, team1ID, team2ID, maxMaps, title, skipVeto, apiKey)
}

// CancelMatch mocks base method.
func (m *MockMatchesRepository) CancelMatch(ctx context.Context, matchID entity.MatchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMatch", ctx, matchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelMatch indicates an expected call of CancelMatch.
func (mr *MockMatchesRepositoryMockRecorder) CancelMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMatch", reflect.TypeOf((*MockMatchesRepository)(nil).CancelMatch), ctx, matchID)
}

// GetMatch mocks base method.
func (m *MockMatchesRepository) GetMatch(ctx context.Context, id entity.MatchID) (*database.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", ctx, id)
	ret0, _ := ret[0].(*database.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockMatchesRepositoryMockRecorder) GetMatch(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockMatchesRepository)(nil).GetMatch), ctx, id)
}

// GetMatchesByTeam mocks base method.
func (m *MockMatchesRepository) GetMatchesByTeam(ctx context.Context, teamID entity.TeamID) ([]*database.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByTeam", ctx, teamID)
	ret0, _ := ret[0].([]*database.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByTeam indicates an expected call of GetMatchesByTeam.
func (mr *MockMatchesRepositoryMockRecorder) GetMatchesByTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByTeam", reflect.TypeOf((*MockMatchesRepository)(nil).GetMatchesByTeam), ctx, teamID)
}

// GetMatchesByUser mocks base method.
func (m *MockMatchesRepository) GetMatchesByUser(ctx context.Context, userID entity.UserID) ([]*database.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByUser", ctx, userID)
	ret0, _ := ret[0].([]*database.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByUser indicates an expected call of GetMatchesByUser.
func (mr *MockMatchesRepositoryMockRecorder) GetMatchesByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByUser", reflect.TypeOf((*MockMatchesRepository)(nil).GetMatchesByUser), ctx, userID)
}

// GetMatchesByUsers mocks base method.
func (m *MockMatchesRepository) GetMatchesByUsers(ctx context.Context, userIDs []entity.UserID) (map[entity.UserID][]*database.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByUsers", ctx, userIDs)
	ret0, _ := ret[0].(map[entity.UserID][]*database.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByUsers indicates an expected call of GetMatchesByUsers.
func (mr *MockMatchesRepositoryMockRecorder) GetMatchesByUsers(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByUsers", reflect.TypeOf((*MockMatchesRepository)(nil).GetMatchesByUsers), ctx, userIDs)
}

// GetMatchesByWinner mocks base method.
func (m *MockMatchesRepository) GetMatchesByWinner(ctx context.Context, teamID entity.TeamID) ([]*database.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByWinner", ctx, teamID)
	ret0, _ := ret[0].([]*database.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByWinner indicates an expected call of GetMatchesByWinner.
func (mr *MockMatchesRepositoryMockRecorder) GetMatchesByWinner(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByWinner", reflect.TypeOf((*MockMatchesRepository)(nil).GetMatchesByWinner), ctx, teamID)
}

// StartMatch mocks base method.
func (m *MockMatchesRepository) StartMatch(ctx context.Context, matchID entity.MatchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMatch", ctx, matchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartMatch indicates an expected call of StartMatch.
func (mr *MockMatchesRepositoryMockRecorder) StartMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatch", reflect.TypeOf((*MockMatchesRepository)(nil).StartMatch), ctx, matchID)
}

// UpdateMatchWinner mocks base method.
func (m *MockMatchesRepository) UpdateMatchWinner(ctx context.Context, matchID entity.MatchID, winnerID entity.TeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchWinner", ctx, matchID, winnerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchWinner indicates an expected call of UpdateMatchWinner.
func (mr *MockMatchesRepositoryMockRecorder) UpdateMatchWinner(ctx, matchID, winnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchWinner", reflect.TypeOf((*MockMatchesRepository)(nil).UpdateMatchWinner), ctx, matchID, winnerID)
}

// UpdateTeam1Score mocks base method.
func (m *MockMatchesRepository) UpdateTeam1Score(ctx context.Context, matchID entity.MatchID, score uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam1Score", ctx, matchID, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam1Score indicates an expected call of UpdateTeam1Score.
func (mr *MockMatchesRepositoryMockRecorder) UpdateTeam1Score(ctx, matchID, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam1Score", reflect.TypeOf((*MockMatchesRepository)(nil).UpdateTeam1Score), ctx, matchID, score)
}

// UpdateTeam2Score mocks base method.
func (m *MockMatchesRepository) UpdateTeam2Score(ctx context.Context, matchID entity.MatchID, score uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam2Score", ctx, matchID, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam2Score indicates an expected call of UpdateTeam2Score.
func (mr *MockMatchesRepositoryMockRecorder) UpdateTeam2Score(ctx, matchID, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam2Score", reflect.TypeOf((*MockMatchesRepository)(nil).UpdateTeam2Score), ctx, matchID, score)
}

// MockMapStatRepository is a mock of MapStatRepository interface.
type MockMapStatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMapStatRepositoryMockRecorder
}

// MockMapStatRepositoryMockRecorder is the mock recorder for MockMapStatRepository.
type MockMapStatRepositoryMockRecorder struct {
	mock *MockMapStatRepository
}

// NewMockMapStatRepository creates a new mock instance.
func NewMockMapStatRepository(ctrl *gomock.Controller) *MockMapStatRepository {
	mock := &MockMapStatRepository{ctrl: ctrl}
	mock.recorder = &MockMapStatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapStatRepository) EXPECT() *MockMapStatRepositoryMockRecorder {
	return m.recorder
}

// GetMapStat mocks base method.
func (m *MockMapStatRepository) GetMapStat(ctx context.Context, id entity.MapStatsID) (*database.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStat", ctx, id)
	ret0, _ := ret[0].(*database.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStat indicates an expected call of GetMapStat.
func (mr *MockMapStatRepositoryMockRecorder) GetMapStat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStat", reflect.TypeOf((*MockMapStatRepository)(nil).GetMapStat), ctx, id)
}

// GetMapStatsByMatch mocks base method.
func (m *MockMapStatRepository) GetMapStatsByMatch(ctx context.Context, matchID entity.MatchID) ([]*database.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatsByMatch", ctx, matchID)
	ret0, _ := ret[0].([]*database.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStatsByMatch indicates an expected call of GetMapStatsByMatch.
func (mr *MockMapStatRepositoryMockRecorder) GetMapStatsByMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatsByMatch", reflect.TypeOf((*MockMapStatRepository)(nil).GetMapStatsByMatch), ctx, matchID)
}

// GetMapStatsByMatchAndMap mocks base method.
func (m *MockMapStatRepository) GetMapStatsByMatchAndMap(ctx context.Context, matchID entity.MatchID, mapNumber uint32) (*database.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatsByMatchAndMap", ctx, matchID, mapNumber)
	ret0, _ := ret[0].(*database.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStatsByMatchAndMap indicates an expected call of GetMapStatsByMatchAndMap.
func (mr *MockMapStatRepositoryMockRecorder) GetMapStatsByMatchAndMap(ctx, matchID, mapNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatsByMatchAndMap", reflect.TypeOf((*MockMapStatRepository)(nil).GetMapStatsByMatchAndMap), ctx, matchID, mapNumber)
}

// GetMapStatsByMatches mocks base method.
func (m *MockMapStatRepository) GetMapStatsByMatches(ctx context.Context, matchIDs []entity.MatchID) (map[entity.MatchID][]*database.MapStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStatsByMatches", ctx, matchIDs)
	ret0, _ := ret[0].(map[entity.MatchID][]*database.MapStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStatsByMatches indicates an expected call of GetMapStatsByMatches.
func (mr *MockMapStatRepositoryMockRecorder) GetMapStatsByMatches(ctx, matchIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStatsByMatches", reflect.TypeOf((*MockMapStatRepository)(nil).GetMapStatsByMatches), ctx, matchIDs)
}

// MockPlayerStatRepository is a mock of PlayerStatRepository interface.
type MockPlayerStatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerStatRepositoryMockRecorder
}

// MockPlayerStatRepositoryMockRecorder is the mock recorder for MockPlayerStatRepository.
type MockPlayerStatRepositoryMockRecorder struct {
	mock *MockPlayerStatRepository
}

// NewMockPlayerStatRepository creates a new mock instance.
func NewMockPlayerStatRepository(ctrl *gomock.Controller) *MockPlayerStatRepository {
	mock := &MockPlayerStatRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerStatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerStatRepository) EXPECT() *MockPlayerStatRepositoryMockRecorder {
	return m.recorder
}

// GetPlayerStatsByMapstats mocks base method.
func (m *MockPlayerStatRepository) GetPlayerStatsByMapstats(ctx context.Context, mapStatsID []entity.MapStatsID) (map[entity.MapStatsID][]*database.PlayerStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStatsByMapstats", ctx, mapStatsID)
	ret0, _ := ret[0].(map[entity.MapStatsID][]*database.PlayerStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerStatsByMapstats indicates an expected call of GetPlayerStatsByMapstats.
func (mr *MockPlayerStatRepositoryMockRecorder) GetPlayerStatsByMapstats(ctx, mapStatsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStatsByMapstats", reflect.TypeOf((*MockPlayerStatRepository)(nil).GetPlayerStatsByMapstats), ctx, mapStatsID)
}

// GetPlayerStatsByMatch mocks base method.
func (m *MockPlayerStatRepository) GetPlayerStatsByMatch(ctx context.Context, matchID entity.MatchID) ([]*database.PlayerStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStatsByMatch", ctx, matchID)
	ret0, _ := ret[0].([]*database.PlayerStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerStatsByMatch indicates an expected call of GetPlayerStatsByMatch.
func (mr *MockPlayerStatRepositoryMockRecorder) GetPlayerStatsByMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStatsByMatch", reflect.TypeOf((*MockPlayerStatRepository)(nil).GetPlayerStatsByMatch), ctx, matchID)
}

// GetPlayerStatsBySteamID mocks base method.
func (m *MockPlayerStatRepository) GetPlayerStatsBySteamID(ctx context.Context, steamID entity.SteamID) ([]*database.PlayerStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStatsBySteamID", ctx, steamID)
	ret0, _ := ret[0].([]*database.PlayerStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerStatsBySteamID indicates an expected call of GetPlayerStatsBySteamID.
func (mr *MockPlayerStatRepositoryMockRecorder) GetPlayerStatsBySteamID(ctx, steamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStatsBySteamID", reflect.TypeOf((*MockPlayerStatRepository)(nil).GetPlayerStatsBySteamID), ctx, steamID)
}

// MockTeamsRepository is a mock of TeamsRepository interface.
type MockTeamsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamsRepositoryMockRecorder
}

// MockTeamsRepositoryMockRecorder is the mock recorder for MockTeamsRepository.
type MockTeamsRepositoryMockRecorder struct {
	mock *MockTeamsRepository
}

// NewMockTeamsRepository creates a new mock instance.
func NewMockTeamsRepository(ctrl *gomock.Controller) *MockTeamsRepository {
	mock := &MockTeamsRepository{ctrl: ctrl}
	mock.recorder = &MockTeamsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamsRepository) EXPECT() *MockTeamsRepositoryMockRecorder {
	return m.recorder
}

// AddTeam mocks base method.
func (m *MockTeamsRepository) AddTeam(ctx context.Context, userID entity.UserID, name, tag, flag, logo string, public bool) (entity.TeamID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeam", ctx, userID, name, tag, flag, logo, public)
	ret0, _ := ret[0].(entity.TeamID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeam indicates an expected call of AddTeam.
func (mr *MockTeamsRepositoryMockRecorder) AddTeam(ctx, userID, name, tag, flag, logo, public interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeam", reflect.TypeOf((*MockTeamsRepository)(nil).AddTeam), ctx, userID, name, tag, flag, logo, public)
}

// GetPublicTeams mocks base method.
func (m *MockTeamsRepository) GetPublicTeams(ctx context.Context) ([]*database.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicTeams", ctx)
	ret0, _ := ret[0].([]*database.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicTeams indicates an expected call of GetPublicTeams.
func (mr *MockTeamsRepositoryMockRecorder) GetPublicTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicTeams", reflect.TypeOf((*MockTeamsRepository)(nil).GetPublicTeams), ctx)
}

// GetTeam mocks base method.
func (m *MockTeamsRepository) GetTeam(ctx context.Context, id entity.TeamID) (*database.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, id)
	ret0, _ := ret[0].(*database.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamsRepositoryMockRecorder) GetTeam(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamsRepository)(nil).GetTeam), ctx, id)
}

// GetTeams mocks base method.
func (m *MockTeamsRepository) GetTeams(ctx context.Context, ids []entity.TeamID) (map[entity.TeamID]*database.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, ids)
	ret0, _ := ret[0].(map[entity.TeamID]*database.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockTeamsRepositoryMockRecorder) GetTeams(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockTeamsRepository)(nil).GetTeams), ctx, ids)
}

// GetTeamsByUser mocks base method.
func (m *MockTeamsRepository) GetTeamsByUser(ctx context.Context, userID entity.UserID) ([]*database.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsByUser", ctx, userID)
	ret0, _ := ret[0].([]*database.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsByUser indicates an expected call of GetTeamsByUser.
func (mr *MockTeamsRepositoryMockRecorder) GetTeamsByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsByUser", reflect.TypeOf((*MockTeamsRepository)(nil).GetTeamsByUser), ctx, userID)
}

// GetTeamsByUsers mocks base method.
func (m *MockTeamsRepository) GetTeamsByUsers(ctx context.Context, userIDs []entity.UserID) (map[entity.UserID][]*database.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsByUsers", ctx, userIDs)
	ret0, _ := ret[0].(map[entity.UserID][]*database.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsByUsers indicates an expected call of GetTeamsByUsers.
func (mr *MockTeamsRepositoryMockRecorder) GetTeamsByUsers(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsByUsers", reflect.TypeOf((*MockTeamsRepository)(nil).GetTeamsByUsers), ctx, userIDs)
}

// MockPlayersRepository is a mock of PlayersRepository interface.
type MockPlayersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayersRepositoryMockRecorder
}

// MockPlayersRepositoryMockRecorder is the mock recorder for MockPlayersRepository.
type MockPlayersRepositoryMockRecorder struct {
	mock *MockPlayersRepository
}

// NewMockPlayersRepository creates a new mock instance.
func NewMockPlayersRepository(ctrl *gomock.Controller) *MockPlayersRepository {
	mock := &MockPlayersRepository{ctrl: ctrl}
	mock.recorder = &MockPlayersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayersRepository) EXPECT() *MockPlayersRepositoryMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method.
func (m *MockPlayersRepository) AddPlayer(ctx context.Context, teamID entity.TeamID, steamID entity.SteamID, name string) (entity.PlayerID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", ctx, teamID, steamID, name)
	ret0, _ := ret[0].(entity.PlayerID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockPlayersRepositoryMockRecorder) AddPlayer(ctx, teamID, steamID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockPlayersRepository)(nil).AddPlayer), ctx, teamID, steamID, name)
}

// GetPlayer mocks base method.
func (m *MockPlayersRepository) GetPlayer(ctx context.Context, id entity.PlayerID) (*database.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, id)
	ret0, _ := ret[0].(*database.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockPlayersRepositoryMockRecorder) GetPlayer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayersRepository)(nil).GetPlayer), ctx, id)
}

// GetPlayersByTeam mocks base method.
func (m *MockPlayersRepository) GetPlayersByTeam(ctx context.Context, teamID entity.TeamID) ([]*database.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByTeam", ctx, teamID)
	ret0, _ := ret[0].([]*database.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByTeam indicates an expected call of GetPlayersByTeam.
func (mr *MockPlayersRepositoryMockRecorder) GetPlayersByTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByTeam", reflect.TypeOf((*MockPlayersRepository)(nil).GetPlayersByTeam), ctx, teamID)
}

// GetPlayersByTeams mocks base method.
func (m *MockPlayersRepository) GetPlayersByTeams(ctx context.Context, teamIDs []entity.TeamID) (map[entity.TeamID][]*database.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByTeams", ctx, teamIDs)
	ret0, _ := ret[0].(map[entity.TeamID][]*database.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByTeams indicates an expected call of GetPlayersByTeams.
func (mr *MockPlayersRepositoryMockRecorder) GetPlayersByTeams(ctx, teamIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByTeams", reflect.TypeOf((*MockPlayersRepository)(nil).GetPlayersByTeams), ctx, teamIDs)
}
