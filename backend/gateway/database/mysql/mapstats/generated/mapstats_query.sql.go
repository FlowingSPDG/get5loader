// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: mapstats_query.sql

package mapstats_gen

import (
	"context"
)

const getMapStats = `-- name: GetMapStats :one
SELECT id, match_id, map_number, map_name, start_time, end_time, winner, team1_score, team2_score, forfeit FROM map_stats
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMapStats(ctx context.Context, id int64) (MapStat, error) {
	row := q.db.QueryRowContext(ctx, getMapStats, id)
	var i MapStat
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.MapNumber,
		&i.MapName,
		&i.StartTime,
		&i.EndTime,
		&i.Winner,
		&i.Team1Score,
		&i.Team2Score,
		&i.Forfeit,
	)
	return i, err
}

const getMapStatsByMatch = `-- name: GetMapStatsByMatch :many
SELECT id, match_id, map_number, map_name, start_time, end_time, winner, team1_score, team2_score, forfeit FROM map_stats
WHERE match_id = ?
`

func (q *Queries) GetMapStatsByMatch(ctx context.Context, matchID int64) ([]MapStat, error) {
	rows, err := q.db.QueryContext(ctx, getMapStatsByMatch, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MapStat
	for rows.Next() {
		var i MapStat
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.MapNumber,
			&i.MapName,
			&i.StartTime,
			&i.EndTime,
			&i.Winner,
			&i.Team1Score,
			&i.Team2Score,
			&i.Forfeit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapStatsByMatchAndMap = `-- name: GetMapStatsByMatchAndMap :one
SELECT id, match_id, map_number, map_name, start_time, end_time, winner, team1_score, team2_score, forfeit FROM map_stats
WHERE match_id = ? AND map_number = ? LIMIT 1
`

type GetMapStatsByMatchAndMapParams struct {
	MatchID   int64
	MapNumber int32
}

func (q *Queries) GetMapStatsByMatchAndMap(ctx context.Context, arg GetMapStatsByMatchAndMapParams) (MapStat, error) {
	row := q.db.QueryRowContext(ctx, getMapStatsByMatchAndMap, arg.MatchID, arg.MapNumber)
	var i MapStat
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.MapNumber,
		&i.MapName,
		&i.StartTime,
		&i.EndTime,
		&i.Winner,
		&i.Team1Score,
		&i.Team2Score,
		&i.Forfeit,
	)
	return i, err
}
