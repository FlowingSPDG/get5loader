// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: gameserver_query.sql

package gameservers_gen

import (
	"context"
	"database/sql"
)

const addGameServer = `-- name: AddGameServer :execresult
INSERT INTO game_servers (
  user_id, ip, port, rcon_password, display_name, is_public
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type AddGameServerParams struct {
	UserID       int64
	Ip           string
	Port         int32
	RconPassword string
	DisplayName  string
	IsPublic     bool
}

func (q *Queries) AddGameServer(ctx context.Context, arg AddGameServerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addGameServer,
		arg.UserID,
		arg.Ip,
		arg.Port,
		arg.RconPassword,
		arg.DisplayName,
		arg.IsPublic,
	)
}

const deleteGameServer = `-- name: DeleteGameServer :execresult
DELETE FROM game_servers
WHERE id = ?
`

func (q *Queries) DeleteGameServer(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteGameServer, id)
}

const getGameServers = `-- name: GetGameServers :one
SELECT id, user_id, in_use, ip, port, rcon_password, display_name, is_public FROM game_servers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGameServers(ctx context.Context, id int64) (GameServer, error) {
	row := q.db.QueryRowContext(ctx, getGameServers, id)
	var i GameServer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InUse,
		&i.Ip,
		&i.Port,
		&i.RconPassword,
		&i.DisplayName,
		&i.IsPublic,
	)
	return i, err
}

const getGameServersByUser = `-- name: GetGameServersByUser :many
SELECT id, user_id, in_use, ip, port, rcon_password, display_name, is_public FROM game_servers
WHERE user_id = ?
`

func (q *Queries) GetGameServersByUser(ctx context.Context, userID int64) ([]GameServer, error) {
	rows, err := q.db.QueryContext(ctx, getGameServersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameServer
	for rows.Next() {
		var i GameServer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.InUse,
			&i.Ip,
			&i.Port,
			&i.RconPassword,
			&i.DisplayName,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicGameServers = `-- name: GetPublicGameServers :many
SELECT id, user_id, in_use, ip, port, rcon_password, display_name, is_public FROM game_servers
WHERE is_public = TRUE
`

func (q *Queries) GetPublicGameServers(ctx context.Context) ([]GameServer, error) {
	rows, err := q.db.QueryContext(ctx, getPublicGameServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameServer
	for rows.Next() {
		var i GameServer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.InUse,
			&i.Ip,
			&i.Port,
			&i.RconPassword,
			&i.DisplayName,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
