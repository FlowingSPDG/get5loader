// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: players_query.sql

package players_gen

import (
	"context"
	"database/sql"
	"strings"
)

const addPlayer = `-- name: AddPlayer :execresult
INSERT INTO players (
  id,
  team_id,
  steam_id,
  name
) VALUES (
  ?,
  ?,
  ?,
  ?
)
`

type AddPlayerParams struct {
	ID      string
	TeamID  string
	SteamID uint64
	Name    string
}

func (q *Queries) AddPlayer(ctx context.Context, arg AddPlayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPlayer,
		arg.ID,
		arg.TeamID,
		arg.SteamID,
		arg.Name,
	)
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, team_id, steam_id, name FROM players
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.SteamID,
		&i.Name,
	)
	return i, err
}

const getPlayerBySteamID = `-- name: GetPlayerBySteamID :one
SELECT id, team_id, steam_id, name FROM players
WHERE steam_id = ? LIMIT 1
`

func (q *Queries) GetPlayerBySteamID(ctx context.Context, steamID uint64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerBySteamID, steamID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.SteamID,
		&i.Name,
	)
	return i, err
}

const getPlayersByTeam = `-- name: GetPlayersByTeam :many
SELECT id, team_id, steam_id, name FROM players
WHERE team_id = ?
`

func (q *Queries) GetPlayersByTeam(ctx context.Context, teamID string) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersByTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SteamID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayersByTeams = `-- name: GetPlayersByTeams :many
SELECT id, team_id, steam_id, name FROM players
WHERE team_id IN (/*SLICE:team_ids*/?)
`

func (q *Queries) GetPlayersByTeams(ctx context.Context, teamIds []string) ([]Player, error) {
	query := getPlayersByTeams
	var queryParams []interface{}
	if len(teamIds) > 0 {
		for _, v := range teamIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:team_ids*/?", strings.Repeat(",?", len(teamIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:team_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SteamID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
