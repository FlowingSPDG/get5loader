// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users_query.sql

package users_gen

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  steam_id, name, admin, password_hash
) VALUES (
  ?, ?, ?, ?
)
`

type CreateUserParams struct {
	SteamID      string
	Name         string
	Admin        bool
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.SteamID,
		arg.Name,
		arg.Admin,
		arg.PasswordHash,
	)
}

const getUser = `-- name: GetUser :one
SELECT id, steam_id, name, admin, created_at, updated_at, password_hash FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SteamID,
		&i.Name,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const getUserBySteamID = `-- name: GetUserBySteamID :one
SELECT id, steam_id, name, admin, created_at, updated_at, password_hash FROM users
WHERE steam_id = ? LIMIT 1
`

func (q *Queries) GetUserBySteamID(ctx context.Context, steamID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySteamID, steamID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SteamID,
		&i.Name,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}
