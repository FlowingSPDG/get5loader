// Code generated by MockGen. DO NOT EDIT.
// Source: ./rcon.go

// Package mock_rcon is a generated GoMock package.
package mock_rcon

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRCONAdapter is a mock of RCONAdapter interface.
type MockRCONAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRCONAdapterMockRecorder
}

// MockRCONAdapterMockRecorder is the mock recorder for MockRCONAdapter.
type MockRCONAdapterMockRecorder struct {
	mock *MockRCONAdapter
}

// NewMockRCONAdapter creates a new mock instance.
func NewMockRCONAdapter(ctrl *gomock.Controller) *MockRCONAdapter {
	mock := &MockRCONAdapter{ctrl: ctrl}
	mock.recorder = &MockRCONAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCONAdapter) EXPECT() *MockRCONAdapterMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRCONAdapter) Execute(ip string, port int, password, cmd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ip, port, password, cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRCONAdapterMockRecorder) Execute(ip, port, password, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRCONAdapter)(nil).Execute), ip, port, password, cmd)
}
