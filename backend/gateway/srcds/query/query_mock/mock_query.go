// Code generated by MockGen. DO NOT EDIT.
// Source: ./query.go

// Package mock_query is a generated GoMock package.
package mock_query

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryAdapter is a mock of QueryAdapter interface.
type MockQueryAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockQueryAdapterMockRecorder
}

// MockQueryAdapterMockRecorder is the mock recorder for MockQueryAdapter.
type MockQueryAdapterMockRecorder struct {
	mock *MockQueryAdapter
}

// NewMockQueryAdapter creates a new mock instance.
func NewMockQueryAdapter(ctrl *gomock.Controller) *MockQueryAdapter {
	mock := &MockQueryAdapter{ctrl: ctrl}
	mock.recorder = &MockQueryAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryAdapter) EXPECT() *MockQueryAdapterMockRecorder {
	return m.recorder
}

// QueryPlayer mocks base method.
func (m *MockQueryAdapter) QueryPlayer(ip string, port int, password string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPlayer", ip, port, password)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPlayer indicates an expected call of QueryPlayer.
func (mr *MockQueryAdapterMockRecorder) QueryPlayer(ip, port, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPlayer", reflect.TypeOf((*MockQueryAdapter)(nil).QueryPlayer), ip, port, password)
}
