syntax = 'proto3';
import "google/protobuf/timestamp.proto";

service Get5 {
  // User related
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserReply) {}
  rpc GetUser(GetUserRequest) returns (GetUserReply) {}
  rpc EditUser(EditUserRequest) returns (EditUserReply) {}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserReply) {}
  rpc GetOrRegisterUser(RegisterUserRequest) returns (RegisterUserReply) {}
  
  // Team related. CRUD
  rpc RegisterTeam(RegisterTeamRequest) returns (RegisterTeamReply) {}
  rpc GetTeam(GetTeamRequest) returns (GetTeamReply) {}
  rpc EditTeam(EditTeamRequest) returns (EditTeamReply) {}
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamReply) {}
  
  // Match related. CRUD and Streaming
  rpc RegisterMatch(RegisterMatchRequest) returns (RegisterMatchReply) {}
  rpc GetMatch(GetMatchRequest) returns (GetMatchReply) {}
  rpc EditMatch(EditMatchRequest) returns (EditMatchReply) {}
  rpc DeleteMatch(DeleteMatchRequest) returns (DeleteMatchReply) {}

  rpc MatchEvent(MatchEventRequest) returns (stream MatchEventReply) {} // Streams match events such as "mapend","matchend" etc.

  // Map stats realted. CRUD
  rpc RegisterMapStats(RegisterMapStatsRequest) returns (RegisterMapStatsReply) {}
  rpc GetMapStats(GetMapStatsRequest) returns (GetMapStatsReply) {}
  rpc EditMapStats(EditMapStatsRequest) returns (EditMapStatsReply) {}
  rpc DeleteMapStats(DeleteMapStatsRequest) returns (DeleteMapStatsReply) {}

  // Player related. CRUD
  rpc RegisterPlayerStats(RegisterPlayerStatsRequest) returns (RegisterPlayerStatsReply) {}
  rpc GetPlayerStats(GetPlayerStatsRequest) returns (GetPlayerStatsReply) {}
  rpc EditPlayerStats(EditPlayerStatsRequest) returns (EditPlayerStatsReply) {}
  rpc DeletePlayerStats(DeletePlayerStatsRequest) returns (DeletePlayerStatsReply) {}

  // Game Server related. CRUD
  rpc RegisterGameServer(RegisterGameServerRequest) returns (RegisterGameServerReply) {}
  rpc GetGameServer(GetGameServerRequest) returns (GetGameServerReply) {}
  rpc EditGameServer(EditGameServerRequest) returns (EditGameServerReply) {}
  rpc DeleteGameServer(DeleteGameServerRequest) returns (DeleteGameServerReply) {}

  // Get resources that belongs to user. GET
  rpc GetTeamsByUserID(GetTeamsByUserIDRequest) returns (GetTeamsByUserIDReply) {}
  // rpc GetGameServersByUserID(GetTeamsByUserIDRequest) returns (GetTeamsByUserIDReply) {}
  // rpc GetMapStatsByUserID(GetTeamsByUserIDRequest) returns (GetTeamsByUserIDReply) {}
  // rpc GetPlayerStatsByUserID(GetTeamsByUserIDRequest) returns (GetTeamsByUserIDReply) {}
}

// User Data Struct
message UserData {
  int32 id = 1;
  string steamid = 2;
  string name = 3;
  bool admin = 4;
}

message RegisterUserRequest {
  string steamid = 1;
}

message RegisterUserReply {
  bool error = 1;
  string errormessage = 2;
  UserData user = 3;
}

message GetUserRequest {
  oneof ids {
    int32 id = 1;
    string steamid = 2;
  }  
}

message GetUserReply {
  bool error = 1;
  string errormessage = 2;
  UserData user = 3;
}

message EditUserRequest {
  UserData user = 1; // IDのみそのままでそれ以外の情報を変更して反映する
}

message EditUserReply {
  bool error = 1;
  string errormessage = 2;
}

message DeleteUserRequest {
  int32 id = 1;
}

message DeleteUserReply {
  bool error = 1;
  string errormessage = 2;
}

// Team Data Struct
message TeamData {
  int32 id = 1;
  int32 userid = 2;
  string name = 3;
  string tag = 4;
  string flag = 5;
  string logo = 6;
  repeated string auths = 7;
  bool publicteam = 8;
}

message RegisterTeamRequest {
  TeamData team = 1;
}

message RegisterTeamReply {
  bool error = 1;
  string errormessage = 2;
  int32 id = 3;
}

message GetTeamRequest {
  int32 id = 1;
}

message GetTeamsByUserIDRequest {
  int32 userid = 1;
}

message GetTeamsByUserIDReply {
  repeated TeamData team = 1;
}

message GetTeamReply {
  TeamData team = 1;
}

message EditTeamRequest {
  TeamData team = 1; // IDのみそのままでそれ以外の情報を変更して反映する
}

message EditTeamReply {
  bool error = 1;
  string errormessage = 2;
}

message DeleteTeamRequest {
  int32 id = 1;
}

message DeleteTeamReply {
  bool error = 1;
  string errormessage = 2;
}

// Match Data Struct
message MatchData {
  int32 id = 1;
  int32 userid = 2;
  int32 serverid = 3;
  int32 winner = 4;
  bool cancelled = 5;
  google.protobuf.Timestamp starttime = 6;
  google.protobuf.Timestamp endtime = 7;
  int32 maxmaps = 8;
  string title = 9;
  bool skipveto = 10;
  string apikey = 11;
  repeated string vetomappool = 12;
  int32 team1score = 13;
  int32 team2score = 14;
  string team1string = 15;
  string team2string = 16;
  bool forfeit = 17;
  string pluginversion = 18;
  repeated MapStatsData mapstats = 19;
}

message RegisterMatchRequest {
  int32 userid = 1;
  int32 team1id = 2;
  int32 team2id = 3;
  string team1string = 4;
  string team2string = 5;
  int32 maxmaps = 6;
  bool skipveto = 7;
  string title = 8;
  repeated string vetomappool = 9;
  int32 serverid = 10;
  map<string, string> cvars = 11;
  string side_type = 12;
  bool is_pug = 13;
}

message RegisterMatchReply {
  bool error = 1;
  string errormessage = 2;
  int32 id = 3;
}

message GetMatchRequest {
  int32 id = 1;
}

message GetMatchReply {
  bool error = 1;
  string errormessage = 2;
  MatchData match = 3;
}

message EditMatchRequest {
  MatchData match = 1; // IDのみそのままでそれ以外の情報を変更して反映する
}

message EditMatchReply {
  bool error = 1;
  string errormessage = 2;
}

message DeleteMatchRequest {
  int32 matchid = 1;
}

message DeleteMatchReply {
  bool error = 1;
  string errormessage = 2;
}

message MatchEventRequest {
  int32 matchid = 1;
}

// Streaming API
message MatchEventReply {
  oneof event {
    MatchEventMatchFinish matchfinish = 1;
    MatchEventMapStart mapstart = 2;
    MatchEventMapUpdate mapupdate = 3;
    MatchEventMapFinish mapfinish = 4;
    MatchEventMapPlayerUpdate mapplayerupdate = 5;
    MatchEventInitialized initialized = 6;
    MatchEventPlayerKill playerkill = 7;
    MatchEventGet5Event get5event = 8;
    // MatchEventVetoUpdate vetoupdate = 9;
    // MatchEventDemoUpload demoupload = 10;
  }
}

message MatchEventInitialized {
  
}

message MatchEventMatchFinish {
  int32 matchid = 1;
  string winner = 2;
  bool forfeit = 3;
}

message MatchEventMapStart {
  int32 matchid = 1;
  int32 mapnumber = 2;
  string mapname = 3;
}

message MatchEventMapUpdate {
  int32 matchid = 1;
  int32 mapnumber = 2;
  int32 team1score = 3;
  int32 team2score = 4;
}

message MatchEventMapFinish {
  int32 matchid = 1;
  int32 mapnumber = 2;
  string winner = 3;
}

message MatchEventMapPlayerUpdate {
  int32 matchid = 1;
  int32 mapnumber = 2;
  string steamid = 3;
  string name = 4;
  string team = 5;
  int32 kills = 6;
  int32 assists = 7;
  int32 deaths = 8;
  int32 flashbang_assists = 9;
  int32 teamkills = 10;
  int32 suicides = 11;
  int32 damage = 12;
  int32 headshot_kills = 13;
  int32 roundsplayed = 14;
  int32 bomb_plants = 15;
  int32 bomb_defuses = 16;
  int32 one_kill_rounds = 17;
  int32 two_kill_rounds = 18;
  int32 three_kill_rounds = 19;
  int32 four_kill_rounds = 20;
  int32 five_kill_rounds = 21;
  int32 v1 = 22;
  int32 v2 = 23;
  int32 v3 = 24;
  int32 v4 = 25;
  int32 v5 = 26;
  int32 firstkill_t = 27;
  int32 firstkill_ct = 28;
  int32 firstdeath_t = 29;
  int32 firstdeath_ct = 30;
}

message MatchEventVetoUpdate {
  int32 matchid = 1;
  string map = 2;
  string team = 3;
  string pick_or_veto = 4;
}

message MatchEventDemoUpload {
  int32 matchid = 1;
  int32 mapnumber = 2;
  // binary...
}

message Player {
  string name = 1;
  int32 id = 2;
  string steamid = 3;
  string side = 4;
}

message Position {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message MatchEventPlayerKill {
  int32 matchid = 1;
  Player Attacker = 2;
  Position AttackerPosition = 3;
  Player Victim = 4;
  Position VictimPosition = 5;
  string weapon = 6;
  bool headshot = 7;
  bool penetrated = 8;
}

message Get5EventParams {
  int32 MapNumber = 1;
  string MapName = 2;
  string Team1Name = 3;
  int32 Team1Score = 4;
  int32 Team1SeriesScore = 5;
  string Team2Name = 6;
  int32 Team2Score = 7;
  int32 Team2SeriesScore = 8;
  int32 Headshot = 9;
  string Weapon = 10;
  int32 Reason = 11;
  string Message = 12;
  string File = 13;
  int32 Site = 14;
  string Stage = 15;
  string Attacker = 16;
  string Victim = 17;
  string Winner = 18;
  string WinnerSide = 19;
}

enum Get5Event {
  Get5SeriesStart = 0;
  Get5MapVeto = 1;
  Get5MapPick = 2;
  Get5SidePicked = 3;
  Get5KnifeStart = 4;
  Get5KnifeWon = 5;
  Get5GoingLive = 6;
  Get5PlayerDeath = 7;
  Get5RoundEnd = 8;
  Get5SideSwap = 9;
  Get5MapEnd = 10;
  Get5SeriesEnd = 11;
  Get5BackupLoaded = 12;
  Get5MatchConfigLoadFail = 13;
  Get5ClientSay = 14;
  Get5BombPlanted = 15;
  Get5BombDefused = 16;
  Get5BombExploded = 17;
  Get5PlayerConnected = 18;
  Get5PlayerDisconnect = 19;
  Get5TeamReady = 20;
  Get5TeamUnready = 21;
}

message MatchEventGet5Event {
  int32 matchid = 1;
  Get5EventParams params = 2;
  Get5Event event = 3;
}

// MapStats Data Struct
message MapStatsData {
  int32 id = 1;
  int32 matchid = 2;
  int32 mapnumber = 3;
  string mapname = 4;
  google.protobuf.Timestamp starttime = 5;
  google.protobuf.Timestamp endtime = 6;
  int32 winner = 7;
  int32 team1score = 8;
  int32 team2score = 9;
}

message RegisterMapStatsRequest {
  MapStatsData mapstats = 1;
}

message RegisterMapStatsReply {
  bool error = 1;
  string errormessage = 2;
}

message GetMapStatsRequest {
  int32 id = 1;
}

message GetMapStatsReply {
  bool error = 1;
  string errormessage = 2;
  MapStatsData mapstats = 3;
}

message EditMapStatsRequest {
  MapStatsData mapstats = 1; // ID以外の情報を適用、IDは廃棄
}

message EditMapStatsReply {
  bool error = 1;
  string errormessage = 2;
}

message DeleteMapStatsRequest {
  int32 id = 1;
}

message DeleteMapStatsReply {
  bool error = 1;
  string errormessage = 2;
}


// PlayerStats Data Struct
message PlayerStatsData {
  int32 id = 1;
  int32 matchid = 2;
  int32 mapid = 3;
  int32 teamid = 4;
  string steamid = 5;
  string name = 6;
  int32 kills = 7;
  int32 deaths = 8;
  int32 roundsplayed = 9;
  int32 assists = 10;
  int32 flashbang_assists = 11;
  int32 teamkills = 12;
  int32 suicides = 13;
  int32 headshot_kills = 14;
  int32 damage = 15;
  int32 bomb_plants = 16;
  int32 bomb_defuses = 17;
  int32 one_kill_rounds = 18;
  int32 two_kill_rounds = 19;
  int32 three_kill_rounds = 20;
  int32 four_kill_rounds = 21;
  int32 five_kill_rounds = 22;
  int32 v1 = 23;
  int32 v2 = 24;
  int32 v3 = 25;
  int32 v4 = 26;
  int32 v5 = 27;
  int32 firstkill_t = 28;
  int32 firstkill_ct = 29;
  int32 firstdeath_t = 30;
  int32 firstdeath_ct = 31;
}

message RegisterPlayerStatsRequest {
  int32 matchid = 1;
  int32 mapnumber = 2;
  string steamid = 3;
}

message RegisterPlayerStatsReply {
  bool error = 1;
  string errormessage = 2;
}

message GetPlayerStatsRequest {
  int32 matchid = 1;
  int32 mapnumber = 2;
  string steamid = 3;
}

message GetPlayerStatsReply {
  bool error = 1;
  string errormessage = 2;
  PlayerStatsData playerstats = 3;
}

message EditPlayerStatsRequest {
  PlayerStatsData playerstats = 1; // ID以外の情報を適用、IDは破棄
}

message EditPlayerStatsReply {
  bool error = 1;
  string errormessage = 2;
}

message DeletePlayerStatsRequest {
  int32 id = 1;
}

message DeletePlayerStatsReply {
  bool error = 1;
  string errormessage = 2;
}


// GameServer Data Struct
message GameServerData {
  int32 id = 1;
  int32 userid = 2;
  bool in_use = 3;
  string ipstring = 4;
  int32 port = 5;
  string rcon_password = 6;
  string display_name = 7;
  bool public_server = 8;
}

message RegisterGameServerRequest {
  int32 userid = 1;
  string display_name = 2;
  string ip_string = 3;
  int32 port = 4;
  string rcon_password = 5;
  bool public_server = 6;
}

message RegisterGameServerReply {
  bool error = 1;
  string errormessage = 2;
  int32 id = 3;
}

message GetGameServerRequest {
  int32 id = 1;
}

message GetGameServerReply {
  bool error = 1;
  string errormessage = 2; 
  GameServerData gameserver = 3;
}

message EditGameServerRequest {
  GameServerData gameserver = 1; // ID以外の情報を適用して編集
}

message EditGameServerReply {
  bool error = 1;
  string errormessage = 2; 
}

message DeleteGameServerRequest {
  int32 id = 1;
}

message DeleteGameServerReply {
  bool error = 1;
  string errormessage = 2; 
}